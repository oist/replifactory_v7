[tool.poetry]
name = "biofactory"
version = "0.1.0"
description = "Tool for controlling various robotic platforms for experimental automation in biological science research and education."
authors = ["Fedor Gagarin <fddgagarin@gmail.com>"]
maintainers = []
readme = "README.md"
homepage = "https://github.com/oist/biofactory"
packages = [
    { include = "biofactory", from = "backend" },
]

[tool.poetry.scripts]
ftconf = 'biofactory.ftconf:main'
biofactory = 'biofactory.app:main'

[tool.poetry.dependencies]
python = ">=3.10.0, <3.13"
blinker = "^1.6.2"
click = "^8.1.3"
colorama = "^0.4.6"
flask = "^3.0.0"
flask_cors = "*"
flask_sqlalchemy = "*"
flask-static-digest = "^0.4.0"
gspread = "*"
itsdangerous = "^2.1.2"
jinja2 = "^3.1.2"
markupsafe = "^2.1.2"
matplotlib = "*"
numpy = "^1.26.4"
oauth2client = "*"
pandas = "*"
plotly = "*"
pydantic = "^2.4.0"
pyftdi = "^0.54.0"
pyserial = "^3.5"
pyusb = "^1.2.1"
PyYAML = "^6.0"
schedule = "*"
scipy = "^1.14.0"
six = "^1.16.0"
zipp = "^3.15.0"
pyinstaller = [
    { version = "~5.13.0", platform = "win32" },
]
pywin32 = [
    { version = "306", platform = "win32" }
]
flask-socketio = "^5.3.6"
flask-jwt-extended = "^4.5.3"
usb-monitor = "^1.15"
pydantic-yaml = "^1.2.0"
flask-security-too = {extras = ["common", "fsqla"], version = "^5.3.3"}
bcrypt = "^4.1.2"
pyarrow = "^16.1.0"
python-dotenv = "^1.0.1"
whitenoise = "^6.7.0"


[tool.poetry.group.dev.dependencies]
autopep8 = "^2.0.1"
black = "^24.8.0"
flake8 = {extras = ["bugbear"], version = "^7.1.1"}
isort = "^5.13.2"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
sphinx = "^7.3.7"
git-changelog = "^2.5.2"
pre-commit = "^3.8.0"
flake8-bugbear = "^24.8.19"
flake8-comprehensions = "^3.15.0"
flake8-simplify = "^0.21.0"


[tool.poetry.group.server.dependencies]
gunicorn = "^22.0.0"
gevent = "^24.2.1"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.pytest.ini_options]
pythonpath = "backend"
testpaths = ["backend_tests"]
addopts = [
    "--import-mode=importlib",
    "--cov=biofactory",
    "--cov-report=xml",
    "--cov-report=term",
]
filterwarnings = [
    # note the use of single quote below to denote "raw" strings in TOML
    'ignore::DeprecationWarning:jupyter_client.*:',
    'ignore::DeprecationWarning:pkg_resources.*:',
    'ignore::DeprecationWarning:passlib.*:',
    'ignore::DeprecationWarning:pydantic.*',
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
# extend-exclude = ''

[tool.isort]
atomic = true
profile = "black"
src_paths = ["backend", "backend_tests"]
line_length = 88
skip_gitignore = true
# skip_glob = ["tests/data", "profiling"]
known_first_party = ["black", "blib2to3", "blackd", "_black_version"]

[tool.poetry-dynamic-versioning]
enable = true
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- elif revision is not none -%}
        {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit]) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}
    {%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
files = ["**/biofactory/__init__.py", "**/versions*.js"]
folders = [
  { path = "backend" }
]
patterns = [
    # default
    "(^__version__\\s*(?::.*?)?=\\s*['\"])[^'\"]*(['\"])",
    { value = "(^__version_tuple__\\s*(?::.*?)?=\\s*\\()[^)]*(\\))", mode = "tuple" },
    # replace for version.js
    "(^const _=\")[^'\"]*(\".*)",
]

[tool.poetry-dynamic-versioning.files."**/versions-*.js"]
persistent-substitution = "True"

[tool.git-changelog]
bump = "auto"
convention = "angular"
in-place = false
filter-commits = "e4cf583.."
output = "CHANGELOG.md"
parse-refs = true
provider = "github"
repository = "."
sections = "feat,fix,refactor,ci,deps,docs,perf,style,tests"
template = "keepachangelog"
versioning = "semver"
zerover = false

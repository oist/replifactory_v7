{"version":3,"file":"NewExperimentForm-CGOMRqGP.js","sources":["../../../vue/src/client/pages/replifactory/experiments/NewExperimentForm.vue"],"sourcesContent":["<template>\n  <div class=\"container d-flex align-items-stretch\">\n    <div class=\"row align-items-stretch flex-fill\">\n      <div class=\"bg-body p-3\">\n        <h4>{{ experimentTitle }}</h4>\n        <form>\n          <div class=\"row mb-3\">\n            <label for=\"experimentClassSelect\" class=\"col-sm-2 col-form-label\"\n              >Choose an experiment</label\n            >\n            <div class=\"col-sm-10\">\n              <CInputGroup>\n                <CFormSelect\n                  id=\"experimentClassSelect\"\n                  v-model=\"selectedExperimentPluginId\"\n                  aria-label=\"Select experiment class\"\n                  :disabled=\"isExperimentRunning\"\n                >\n                  <option\n                    v-for=\"(value, id) in modifiedExperimentClassesOptions\"\n                    :key=\"id\"\n                    :value=\"id\"\n                  >\n                    {{ value }}\n                  </option>\n                </CFormSelect>\n                <CButton\n                  type=\"button\"\n                  color=\"success\"\n                  variant=\"outline\"\n                  :disabled=\"isMachineDisconnected\"\n                  @click=\"startExperiment\"\n                  >Start</CButton\n                >\n                <CButton\n                  type=\"button\"\n                  color=\"warning\"\n                  variant=\"outline\"\n                  :disabled=\"isMachineDisconnected\"\n                  @click=\"pauseExperiment\"\n                  >Pause</CButton\n                >\n                <CButton\n                  type=\"button\"\n                  color=\"danger\"\n                  variant=\"outline\"\n                  :disabled=\"isMachineDisconnected\"\n                  @click=\"stopExperiment\"\n                  >Stop</CButton\n                >\n              </CInputGroup>\n            </div>\n          </div>\n        </form>\n        <!-- <CustomDynamicComponent :url=\"descriptionComponent\" /> -->\n        <component :is=\"descriptionComponent\" />\n        <component\n          :is=\"parametersComponent\"\n          @update-parameters=\"handleUpdateParameters\"\n        />\n        <!-- <CustomDynamicComponent :url=\"parametersComponent\" /> -->\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { useRouter } from \"vue-router\";\nimport { CFormSelect, CInputGroup, CButton } from \"@coreui/vue\";\nimport { defineAsyncComponent } from \"vue\";\nimport { componentLoader } from \"@/plugins.js\";\n\nconst store = useStore();\nconst router = useRouter();\n\nconst selectedExperimentPluginId = ref(undefined);\nconst experimentParameters = ref({});\nconst isExperimentRunning = ref(false);\n\nconst getExperimentsPlugins = computed(\n  () => store.getters[\"plugins/getExperimentsPlugins\"],\n);\nconst getPlugin = (id) => store.getters[\"plugins/getPlugin\"](id);\nconst isMachineDisconnected = computed(\n  () => store.getters[\"machine/isDisconnected\"],\n);\n\nconst modifiedExperimentClassesOptions = computed(() => {\n  let options = {\n    none: \"Select an option...\",\n  };\n  getExperimentsPlugins.value.forEach((plugin) => {\n    options[plugin.id] = plugin.name;\n  });\n  return options;\n});\n\nconst selectedExperiment = computed(() => {\n  const plugin = getPlugin(selectedExperimentPluginId.value);\n  if (!plugin) {\n    return {\n      title: \"No experiment selected\",\n      description: { template: \" \" },\n      parameters: { template: \" \" },\n    };\n  }\n  let experimentUiComponents = {\n    title: plugin.name,\n  };\n  plugin.ui_modules.forEach((module) => {\n    experimentUiComponents[module.kind] = defineAsyncComponent({\n      loader: componentLoader(module.path),\n    });\n  });\n  return experimentUiComponents;\n});\nconst descriptionComponent = computed(() => {\n  return selectedExperiment.value.description;\n});\nconst parametersComponent = computed(() => {\n  return selectedExperiment.value.parameters;\n});\nconst experimentTitle = computed(() => {\n  return selectedExperiment.value\n    ? selectedExperiment.value.title\n    : \"Untitiled Experiment\";\n});\n\nwatch(selectedExperimentPluginId, (newVal, oldVal) => {\n  // Clean experimentParameters when selectedExperimentPluginId changes\n  experimentParameters.value = {};\n});\n\nfunction handleUpdateParameters(params) {\n  experimentParameters.value = params;\n}\n\nfunction startExperiment() {\n  store\n    .dispatch(\"experiment/startExperiment\", {\n      pluginId: selectedExperimentPluginId.value,\n      parameters: experimentParameters.value,\n    })\n    .then(() => {\n      router.push({ name: \"Home\" });\n    })\n    .catch((err) => {\n      const message = err.response.data.error || err.response.data;\n      store.dispatch(\"notifyWarning\", {\n        content: message,\n      });\n    });\n}\nfunction stopExperiment() {\n  sendExperimentCommand(\"stop\");\n}\nfunction pauseExperiment() {\n  sendExperimentCommand(\"pause\");\n}\n// function  resumeExperiment() {\n//   sendExperimentCommand(\"resume\");\n// };\nfunction sendExperimentCommand(command, args) {\n  const data = {\n    experimentId: selectedExperimentPluginId,\n    command: command,\n    ...args,\n  };\n  store.dispatch(\"experiment/experimentCommand\", data).catch((err) => {\n    const message = err.response.data.error || err.response.data;\n    store.dispatch(\"notifyWarning\", {\n      content: message,\n    });\n  });\n}\n</script>\n"],"names":["store","useStore","router","useRouter","selectedExperimentPluginId","ref","experimentParameters","isExperimentRunning","getExperimentsPlugins","computed","getPlugin","id","isMachineDisconnected","modifiedExperimentClassesOptions","options","plugin","selectedExperiment","experimentUiComponents","module","defineAsyncComponent","componentLoader","descriptionComponent","parametersComponent","experimentTitle","watch","newVal","oldVal","handleUpdateParameters","params","startExperiment","err","message","stopExperiment","sendExperimentCommand","pauseExperiment","command","args","data"],"mappings":"usBA0EA,MAAMA,EAAQC,EAAQ,EAChBC,EAASC,EAAS,EAElBC,EAA6BC,EAAI,MAAS,EAC1CC,EAAuBD,EAAI,CAAA,CAAE,EAC7BE,EAAsBF,EAAI,EAAK,EAE/BG,EAAwBC,EAC5B,IAAMT,EAAM,QAAQ,+BAA+B,CACrD,EACMU,EAAaC,GAAOX,EAAM,QAAQ,mBAAmB,EAAEW,CAAE,EACzDC,EAAwBH,EAC5B,IAAMT,EAAM,QAAQ,wBAAwB,CAC9C,EAEMa,EAAmCJ,EAAS,IAAM,CACtD,IAAIK,EAAU,CACZ,KAAM,qBACV,EACE,OAAAN,EAAsB,MAAM,QAASO,GAAW,CAC9CD,EAAQC,EAAO,EAAE,EAAIA,EAAO,IAChC,CAAG,EACMD,CACT,CAAC,EAEKE,EAAqBP,EAAS,IAAM,CACxC,MAAMM,EAASL,EAAUN,EAA2B,KAAK,EACzD,GAAI,CAACW,EACH,MAAO,CACL,MAAO,yBACP,YAAa,CAAE,SAAU,GAAK,EAC9B,WAAY,CAAE,SAAU,GAAK,CACnC,EAEE,IAAIE,EAAyB,CAC3B,MAAOF,EAAO,IAClB,EACE,OAAAA,EAAO,WAAW,QAASG,GAAW,CACpCD,EAAuBC,EAAO,IAAI,EAAIC,EAAqB,CACzD,OAAQC,EAAgBF,EAAO,IAAI,CACzC,CAAK,CACL,CAAG,EACMD,CACT,CAAC,EACKI,EAAuBZ,EAAS,IAC7BO,EAAmB,MAAM,WACjC,EACKM,EAAsBb,EAAS,IAC5BO,EAAmB,MAAM,UACjC,EACKO,EAAkBd,EAAS,IACxBO,EAAmB,MACtBA,EAAmB,MAAM,MACzB,sBACL,EAEDQ,EAAMpB,EAA4B,CAACqB,EAAQC,IAAW,CAEpDpB,EAAqB,MAAQ,EAC/B,CAAC,EAED,SAASqB,EAAuBC,EAAQ,CACtCtB,EAAqB,MAAQsB,CAC/B,CAEA,SAASC,GAAkB,CACzB7B,EACG,SAAS,6BAA8B,CACtC,SAAUI,EAA2B,MACrC,WAAYE,EAAqB,KACvC,CAAK,EACA,KAAK,IAAM,CACVJ,EAAO,KAAK,CAAE,KAAM,MAAQ,CAAA,CAClC,CAAK,EACA,MAAO4B,GAAQ,CACd,MAAMC,EAAUD,EAAI,SAAS,KAAK,OAASA,EAAI,SAAS,KACxD9B,EAAM,SAAS,gBAAiB,CAC9B,QAAS+B,CACjB,CAAO,CACP,CAAK,CACL,CACA,SAASC,GAAiB,CACxBC,EAAsB,MAAM,CAC9B,CACA,SAASC,GAAkB,CACzBD,EAAsB,OAAO,CAC/B,CAIA,SAASA,EAAsBE,EAASC,EAAM,CAC5C,MAAMC,EAAO,CACX,aAAcjC,EACd,QAAS+B,EACT,GAAGC,CACP,EACEpC,EAAM,SAAS,+BAAgCqC,CAAI,EAAE,MAAOP,GAAQ,CAClE,MAAMC,EAAUD,EAAI,SAAS,KAAK,OAASA,EAAI,SAAS,KACxD9B,EAAM,SAAS,gBAAiB,CAC9B,QAAS+B,CACf,CAAK,CACL,CAAG,CACH"}